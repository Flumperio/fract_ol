/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: juasanto <juasanto@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/05/31 19:15:38 by juasanto          #+#    #+#             */
/*   Updated: 2021/06/11 15:07:27 by juasanto         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/fractol.h"

void	init_mlx(t_fra *fra);
void	raycast(t_fra *fra);
void	print_frac(t_fra *fra);
int		raycast_loop(t_fra *fra);
/*
 * Fractal
*/



int fracta_Julia(t_fra *fra)
{
	int i;

	fra->jul.zoom = 1;
	fra->jul.moveX = 0;
	fra->jul.moveY = 0;
	fra->jul.maxIterations = 300;
	fra->jul.cRe = -0.7;
	fra->jul.cIm = 0.27015;

  //loop through every pixel
	for(int y = 0; y < fra->resY; y++)
		for(int x = 0; x < fra->resX; x++)
		{
			fra->jul.newRe = 1.5 * (x - fra->resX / 2) / (0.5 * fra->jul.zoom * fra->resX) + fra->jul.moveX;
			fra->jul.newIm = (y - fra->resY/ 2) / (0.5 * fra->jul.zoom * fra->resY) + fra->jul.moveY;
			i = 0;
			while(i < fra->jul.maxIterations)
			{
				fra->jul.oldRe = fra->jul.newRe;
				fra->jul.oldIm = fra->jul.newIm;
				fra->jul.newRe = fra->jul.oldRe * fra->jul.oldRe - fra->jul.oldIm * fra->jul.oldIm + fra->jul.cRe;
				fra->jul.newIm = 2 * fra->jul.oldRe * fra->jul.oldIm + fra->jul.cIm;
				if((fra->jul.newRe * fra->jul.newRe + fra->jul.newIm * fra->jul.newIm) > 4)
					break;
				i++;
			}
			HsvToRgb(fra, i % 256, 255, 255 * (i < fra->jul.maxIterations));
			fra->color = to_rgb(fra->r, fra->g, fra->b);
			my_mlx_pixel_put(fra, x, y, fra->color);
		}
		return (0);
}
/*
 * funciones
*/
void	init_mlx(t_fra *fra)
{
	fra->mlx.mlx_ptr = mlx_init();
	fra->resX = 1200;
	fra->resY = 800;
	fra->mlx.mlx_win = mlx_new_window(fra->mlx.mlx_ptr, fra->resX, fra->resY, "FraTol");
}

int	raycast_loop(t_fra *fra)
{
	int	x;
	int	y;

	x = 0;
	y = 0;
/* 
 * pl_move(cub);
*/
	fra->mlx.img = mlx_new_image(fra->mlx.mlx_ptr, fra->resX, fra->resY);
	fra->mlx.addr = mlx_get_data_addr(fra->mlx.img, &fra->mlx.bits_per_pixel,
			&fra->mlx.line_length, &fra->mlx.endian);
	fracta_Julia(fra);
	mlx_put_image_to_window(fra->mlx.mlx_ptr, fra->mlx.mlx_win, fra->mlx.img, 0, 0);
	mlx_destroy_image(fra->mlx.mlx_ptr, fra->mlx.img);
	return (0);
}

void	raycast(t_fra *fra)
{
	init_mlx(fra);
	//mlx_hook(fra->mlx.mlx_win, 2, 1L << 0, key_press, fra);
	//mlx_hook(fra->mlx.mlx_win, 3, 1L << 1, key_relea, fra);
	mlx_hook(fra->mlx.mlx_win, 17, 1L << 17, ui_cross_exit, fra);
	mlx_loop_hook(fra->mlx.mlx_ptr, raycast_loop, fra);
	mlx_loop(fra->mlx.mlx_ptr);
}

int		main ()
{
	t_fra	*fra;

	fra = ft_calloc(sizeof(t_fra), 1);
	printf("Hola Majo que quieres de pincho");
	raycast(fra);
	free_all(fra);
	system("leaks fractol");
	return(0);
}
